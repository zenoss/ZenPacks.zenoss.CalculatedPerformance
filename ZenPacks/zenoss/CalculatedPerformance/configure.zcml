<?xml version="1.0" encoding="utf-8"?>
<configure
    xmlns="http://namespaces.zope.org/zope"
    xmlns:browser="http://namespaces.zope.org/browser"
    xmlns:zcml="http://namespaces.zope.org/zcml">


    <include package=".browser"/>

    <!-- Info Adapters: DataSources

    For ZenPacks that add new datasource types you must register their Info
    adapter(s). The info adapters provide the API that the web interface needs
    to show information about each instance of your datasource type that is
    created. The info adapters are also used to set the properties of the
    datasource instances.
    -->

    <adapter
        provides=".interfaces.IAggregatingDataSourceInfo"
        for=".datasources.AggregatingDataSource.AggregatingDataSource"
        factory=".info.AggregatingDataSourceInfo"
        />

    <adapter
        provides=".interfaces.IAggregatingDataPointInfo"
        for=".AggregatingDataPoint.AggregatingDataPoint"
        factory=".info.AggregatingDataPointInfo"
        />

    <adapter
        provides=".interfaces.ICalculatedPerformanceDataSourceInfo"
        for=".datasources.CalculatedPerformanceDataSource.CalculatedPerformanceDataSource"
        factory=".info.CalculatedPerformanceDataSourceInfo"
        />

    <adapter factory=".info.ElementPoolInfo"
             for="ZenPacks.zenoss.CalculatedPerformance.ElementPool.ElementPool"
             provides=".interfaces.IElementPoolInfo"/>

    <browser:directRouter
        name="elementpool_router"
        for="*"
        class=".routers.ElementPoolRouter"
        namespace="Zenoss.remote"
        permission="zenoss.View"
        />
    <adapter factory=".facades.ElementPoolFacade"
           provides=".interfaces.IElementPoolFacade"
           name="elementpool"
           for="*"
           />

    <!-- Impact Adapters

    Impact adapters are much like the Dynamic View adapters above in that they
    define relationships between objects. However, they are specifically for
    controlling the "Zenoss Datacenter Impact" product and can be simpler to
    configure because visualization is built-in and you only need to concern
    yourself with defining edges (or relationships) between objects.

    This section should be wrapped in a conditional so your ZenPack will work
    whether or not Zenoss Datacenter Impact is installed.

    IRelationshipDataProvider works much like the Dynamic View
    IRelationsProvider above. It defines dependency relationships between
    objects.

    IStateProvider providers allow you to change how state is calculated for
    certain types of objects. Normally only the events impacting an object are
    used to calculate its state. IStateProvider allows you to bring in
    information from other sources such as the model.

    INodeTrigger providers allow you to define what triggers should be
    configured for certain types of objects automatically. A good example of
    where you'd use this is for port-channel interfaces. You'd likely want to
    create impact edges to all of the member interfaces and setup a redundancy
    policy on the port-channel.

    See impact.py for the subscriber implementations.
    -->
    <configure zcml:condition="installed ZenPacks.zenoss.Impact">
        <include package="ZenPacks.zenoss.Impact" file="meta.zcml"/>

        <subscriber
            provides="ZenPacks.zenoss.Impact.impactd.interfaces.IRelationshipDataProvider"
            for=".ElementPool.ElementPool"
            factory=".impact.ElementPoolRelationsProvider"
            />


    </configure>

</configure>

